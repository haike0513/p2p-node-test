syntax = "proto3";
option go_package = "./";

package protos;

message Zp2p {
  uint32 version = 1;
  ZIdentity type = 2;  // for p2p
  ZAction action = 3;   // for p2p
  ZPushType push_type = 4;        // for vlc
  ZMessage message = 5;
  bytes public_key = 6;
  bytes signature = 7;  // for verifying
}

enum ZIdentity {
  U_TYPE_CLI = 0;  // client
  U_TYPE_SER = 1;  // server
}

enum ZAction {
  Z_TYPE_READ = 0;  // read
  Z_TYPE_WRITE = 1;  // write
}

enum ZPushType {
  Z_TYPE_DM = 0;   // direct msg
  Z_TYPE_BC = 1;   // broadcast
}

// ZMessage
message ZMessage {
  bytes id = 1;
  uint32 version = 2;
  ZType type = 3;
  ZAction action = 4;
  ZIdentity identity = 5;
  bytes public_key = 6;
  bytes data = 7;
  bytes signature = 8;
  bytes from = 9;
  bytes to = 10;
}

enum ZType {
  Z_TYPE_RNG = 0;
  Z_TYPE_EVENT = 1;
  Z_TYPE_CLOCK = 2;
  Z_TYPE_GATEWAY = 3;
  Z_TYPE_ZCHAT = 4;
}

message ZChat {
  string message_data = 1;
  ClockInfo clock = 2;
}

message MergeLog {
  bytes from_id = 1;
  bytes to_id = 2;
  uint64 start_count = 3;
  uint64 end_count = 4;
  Clock s_clock = 5;
  Clock e_clock = 6;
  uint64 merge_at = 7;
}

message Clock {
  map<string, uint64> values = 1;
}

message ClockInfo {
  Clock clock = 1;
  bytes id = 2;       //id ä¸ºnode id
  bytes message_id = 3;
  uint64 count = 4;
  uint64 create_at = 5;
}

// type = TYPE_CLOCK_NODE
message ClockNode {
  Clock clock = 1;
  bytes id = 2;
  bytes message_id = 3;
  uint64 count = 4;
  uint64 create_at = 5;
  bytes raw_message = 6;
}

message NodeInfo {
  repeated string node_ids = 1;
}